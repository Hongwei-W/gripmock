// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/google/uuid"
)

// AddStubOK represents sum type.
type AddStubOK struct {
	Type   AddStubOKType // switch on this field
	ListID ListID
}

// AddStubOKType is oneOf type of AddStubOK.
type AddStubOKType string

// Possible values for AddStubOKType.
const (
	ListIDAddStubOK AddStubOKType = "ListID"
)

// IsListID reports whether AddStubOK is ListID.
func (s AddStubOK) IsListID() bool { return s.Type == ListIDAddStubOK }

// SetListID sets AddStubOK to ListID.
func (s *AddStubOK) SetListID(v ListID) {
	s.Type = ListIDAddStubOK
	s.ListID = v
}

// GetListID returns ListID and true boolean if AddStubOK is ListID.
func (s AddStubOK) GetListID() (v ListID, ok bool) {
	if !s.IsListID() {
		return v, false
	}
	return s.ListID, true
}

// NewListIDAddStubOK returns new AddStubOK from ListID.
func NewListIDAddStubOK(v ListID) AddStubOK {
	var s AddStubOK
	s.SetListID(v)
	return s
}

// AddStubReq represents sum type.
type AddStubReq struct {
	Type     AddStubReqType // switch on this field
	StubList StubList
	Stub     Stub
}

// AddStubReqType is oneOf type of AddStubReq.
type AddStubReqType string

// Possible values for AddStubReqType.
const (
	StubListAddStubReq AddStubReqType = "StubList"
	StubAddStubReq     AddStubReqType = "Stub"
)

// IsStubList reports whether AddStubReq is StubList.
func (s AddStubReq) IsStubList() bool { return s.Type == StubListAddStubReq }

// IsStub reports whether AddStubReq is Stub.
func (s AddStubReq) IsStub() bool { return s.Type == StubAddStubReq }

// SetStubList sets AddStubReq to StubList.
func (s *AddStubReq) SetStubList(v StubList) {
	s.Type = StubListAddStubReq
	s.StubList = v
}

// GetStubList returns StubList and true boolean if AddStubReq is StubList.
func (s AddStubReq) GetStubList() (v StubList, ok bool) {
	if !s.IsStubList() {
		return v, false
	}
	return s.StubList, true
}

// NewStubListAddStubReq returns new AddStubReq from StubList.
func NewStubListAddStubReq(v StubList) AddStubReq {
	var s AddStubReq
	s.SetStubList(v)
	return s
}

// SetStub sets AddStubReq to Stub.
func (s *AddStubReq) SetStub(v Stub) {
	s.Type = StubAddStubReq
	s.Stub = v
}

// GetStub returns Stub and true boolean if AddStubReq is Stub.
func (s AddStubReq) GetStub() (v Stub, ok bool) {
	if !s.IsStub() {
		return v, false
	}
	return s.Stub, true
}

// NewStubAddStubReq returns new AddStubReq from Stub.
func NewStubAddStubReq(v Stub) AddStubReq {
	var s AddStubReq
	s.SetStub(v)
	return s
}

// DeleteStubByIDNoContent is response for DeleteStubByID operation.
type DeleteStubByIDNoContent struct{}

func (*DeleteStubByIDNoContent) deleteStubByIDRes() {}

// DeleteStubByIDNotFound is response for DeleteStubByID operation.
type DeleteStubByIDNotFound struct{}

func (*DeleteStubByIDNotFound) deleteStubByIDRes() {}

type ID uuid.UUID

type ListID []ID

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStubInput returns new OptStubInput with value set to v.
func NewOptStubInput(v StubInput) OptStubInput {
	return OptStubInput{
		Value: v,
		Set:   true,
	}
}

// OptStubInput is optional StubInput.
type OptStubInput struct {
	Value StubInput
	Set   bool
}

// IsSet returns true if OptStubInput was set.
func (o OptStubInput) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStubInput) Reset() {
	var v StubInput
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStubInput) SetTo(v StubInput) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStubInput) Get() (v StubInput, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStubInput) Or(d StubInput) StubInput {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStubOutput returns new OptStubOutput with value set to v.
func NewOptStubOutput(v StubOutput) OptStubOutput {
	return OptStubOutput{
		Value: v,
		Set:   true,
	}
}

// OptStubOutput is optional StubOutput.
type OptStubOutput struct {
	Value StubOutput
	Set   bool
}

// IsSet returns true if OptStubOutput was set.
func (o OptStubOutput) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStubOutput) Reset() {
	var v StubOutput
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStubOutput) SetTo(v StubOutput) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStubOutput) Get() (v StubOutput, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStubOutput) Or(d StubOutput) StubOutput {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint32 returns new OptUint32 with value set to v.
func NewOptUint32(v uint32) OptUint32 {
	return OptUint32{
		Value: v,
		Set:   true,
	}
}

// OptUint32 is optional uint32.
type OptUint32 struct {
	Value uint32
	Set   bool
}

// IsSet returns true if OptUint32 was set.
func (o OptUint32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint32) Reset() {
	var v uint32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint32) SetTo(v uint32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint32) Get() (v uint32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint32) Or(d uint32) uint32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PurgeStubsNoContent is response for PurgeStubs operation.
type PurgeStubsNoContent struct{}

// SearchStubsOK represents sum type.
type SearchStubsOK struct {
	Type SearchStubsOKType // switch on this field
	Stub Stub
}

// SearchStubsOKType is oneOf type of SearchStubsOK.
type SearchStubsOKType string

// Possible values for SearchStubsOKType.
const (
	StubSearchStubsOK SearchStubsOKType = "Stub"
)

// IsStub reports whether SearchStubsOK is Stub.
func (s SearchStubsOK) IsStub() bool { return s.Type == StubSearchStubsOK }

// SetStub sets SearchStubsOK to Stub.
func (s *SearchStubsOK) SetStub(v Stub) {
	s.Type = StubSearchStubsOK
	s.Stub = v
}

// GetStub returns Stub and true boolean if SearchStubsOK is Stub.
func (s SearchStubsOK) GetStub() (v Stub, ok bool) {
	if !s.IsStub() {
		return v, false
	}
	return s.Stub, true
}

// NewStubSearchStubsOK returns new SearchStubsOK from Stub.
func NewStubSearchStubsOK(v Stub) SearchStubsOK {
	var s SearchStubsOK
	s.SetStub(v)
	return s
}

// SearchStubsReq represents sum type.
type SearchStubsReq struct {
	Type     SearchStubsReqType // switch on this field
	StubList StubList
	Stub     Stub
}

// SearchStubsReqType is oneOf type of SearchStubsReq.
type SearchStubsReqType string

// Possible values for SearchStubsReqType.
const (
	StubListSearchStubsReq SearchStubsReqType = "StubList"
	StubSearchStubsReq     SearchStubsReqType = "Stub"
)

// IsStubList reports whether SearchStubsReq is StubList.
func (s SearchStubsReq) IsStubList() bool { return s.Type == StubListSearchStubsReq }

// IsStub reports whether SearchStubsReq is Stub.
func (s SearchStubsReq) IsStub() bool { return s.Type == StubSearchStubsReq }

// SetStubList sets SearchStubsReq to StubList.
func (s *SearchStubsReq) SetStubList(v StubList) {
	s.Type = StubListSearchStubsReq
	s.StubList = v
}

// GetStubList returns StubList and true boolean if SearchStubsReq is StubList.
func (s SearchStubsReq) GetStubList() (v StubList, ok bool) {
	if !s.IsStubList() {
		return v, false
	}
	return s.StubList, true
}

// NewStubListSearchStubsReq returns new SearchStubsReq from StubList.
func NewStubListSearchStubsReq(v StubList) SearchStubsReq {
	var s SearchStubsReq
	s.SetStubList(v)
	return s
}

// SetStub sets SearchStubsReq to Stub.
func (s *SearchStubsReq) SetStub(v Stub) {
	s.Type = StubSearchStubsReq
	s.Stub = v
}

// GetStub returns Stub and true boolean if SearchStubsReq is Stub.
func (s SearchStubsReq) GetStub() (v Stub, ok bool) {
	if !s.IsStub() {
		return v, false
	}
	return s.Stub, true
}

// NewStubSearchStubsReq returns new SearchStubsReq from Stub.
func NewStubSearchStubsReq(v Stub) SearchStubsReq {
	var s SearchStubsReq
	s.SetStub(v)
	return s
}

// Ref: #/components/schemas/Stub
type Stub struct {
	ID      OptID         `json:"id"`
	Service string        `json:"service"`
	Method  string        `json:"method"`
	Input   OptStubInput  `json:"input"`
	Output  OptStubOutput `json:"output"`
}

// GetID returns the value of ID.
func (s *Stub) GetID() OptID {
	return s.ID
}

// GetService returns the value of Service.
func (s *Stub) GetService() string {
	return s.Service
}

// GetMethod returns the value of Method.
func (s *Stub) GetMethod() string {
	return s.Method
}

// GetInput returns the value of Input.
func (s *Stub) GetInput() OptStubInput {
	return s.Input
}

// GetOutput returns the value of Output.
func (s *Stub) GetOutput() OptStubOutput {
	return s.Output
}

// SetID sets the value of ID.
func (s *Stub) SetID(val OptID) {
	s.ID = val
}

// SetService sets the value of Service.
func (s *Stub) SetService(val string) {
	s.Service = val
}

// SetMethod sets the value of Method.
func (s *Stub) SetMethod(val string) {
	s.Method = val
}

// SetInput sets the value of Input.
func (s *Stub) SetInput(val OptStubInput) {
	s.Input = val
}

// SetOutput sets the value of Output.
func (s *Stub) SetOutput(val OptStubOutput) {
	s.Output = val
}

// Ref: #/components/schemas/StubInput
type StubInput struct {
	Equals   *StubInputEquals   `json:"equals"`
	Contains *StubInputContains `json:"contains"`
	Matches  *StubInputMatches  `json:"matches"`
}

// GetEquals returns the value of Equals.
func (s *StubInput) GetEquals() *StubInputEquals {
	return s.Equals
}

// GetContains returns the value of Contains.
func (s *StubInput) GetContains() *StubInputContains {
	return s.Contains
}

// GetMatches returns the value of Matches.
func (s *StubInput) GetMatches() *StubInputMatches {
	return s.Matches
}

// SetEquals sets the value of Equals.
func (s *StubInput) SetEquals(val *StubInputEquals) {
	s.Equals = val
}

// SetContains sets the value of Contains.
func (s *StubInput) SetContains(val *StubInputContains) {
	s.Contains = val
}

// SetMatches sets the value of Matches.
func (s *StubInput) SetMatches(val *StubInputMatches) {
	s.Matches = val
}

type StubInputContains struct{}

type StubInputEquals struct{}

type StubInputMatches struct{}

type StubList []Stub

// Ref: #/components/schemas/StubOutput
type StubOutput struct {
	Data  StubOutputData `json:"data"`
	Error string         `json:"error"`
	Code  OptUint32      `json:"code"`
}

// GetData returns the value of Data.
func (s *StubOutput) GetData() StubOutputData {
	return s.Data
}

// GetError returns the value of Error.
func (s *StubOutput) GetError() string {
	return s.Error
}

// GetCode returns the value of Code.
func (s *StubOutput) GetCode() OptUint32 {
	return s.Code
}

// SetData sets the value of Data.
func (s *StubOutput) SetData(val StubOutputData) {
	s.Data = val
}

// SetError sets the value of Error.
func (s *StubOutput) SetError(val string) {
	s.Error = val
}

// SetCode sets the value of Code.
func (s *StubOutput) SetCode(val OptUint32) {
	s.Code = val
}

type StubOutputData struct{}
