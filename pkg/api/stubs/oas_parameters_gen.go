// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeleteStubByIDParams is parameters of deleteStubByID operation.
type DeleteStubByIDParams struct {
	// ID of stub.
	UUID ID
}

func unpackDeleteStubByIDParams(packed middleware.Parameters) (params DeleteStubByIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(ID)
	}
	return params
}

func decodeDeleteStubByIDParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteStubByIDParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotUUIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotUUIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UUID = ID(paramsDotUUIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
