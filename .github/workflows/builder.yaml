name: builder

on:
  push:
    branches:
      - "master"
      - "debug"
    tags:
      - "v*.*.*"

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Docker daemon for insecure registry
        run: |
          sudo mkdir -p /etc/docker
          echo '{"insecure-registries":["localhost:5000"]}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

      - name: Start local registry
        run: |
          docker pull registry:3.0.0-rc.3
          docker run -d -p 5000:5000 --name registry registry:3.0.0-rc.3

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt
            /var/lib/apt
          key: ${{ runner.os }}-apt-cache
  
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Cache Slim
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/slim
          key: ${{ runner.os }}-slim-${{ hashFiles('**/install-slim.sh') }}

      - name: Cache regctl
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/slim
          key: ${{ runner.os }}-regctl-${{ hashFiles('**/regctl-linux-amd64') }}
  
      - name: Install Slim
        run: curl -sL https://raw.githubusercontent.com/slimtoolkit/slim/master/scripts/install-slim.sh | sudo -E bash -

      - name: Install regctl
        run: |
          curl -sL "https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64" -o regctl
          chmod +x regctl
          sudo mv regctl /usr/local/bin/regctl

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx with insecure registry
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
          buildkitd-config-inline: |
            [registry."localhost:5000"]
              http = true

      - name: Check port availability
        run: |
          echo "Checking port 5000:"
          sudo netstat -tuln | grep ':5000'

      - name: Test local registry
        run: |
          for i in {1..30}; do
            curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/v2/_catalog | grep -q "200" && exit 0
            sleep 5
          done
          exit 1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            bavix/gripmock
            ghcr.io/bavix/gripmock
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Dockerhub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            version=${{ github.ref_name }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=gRPC Mock Server
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push (localhost)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: localhost:5000/bavix/gripmock:latest
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            version=${{ github.ref_name }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=gRPC Mock Server
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify images
        run: |
          docker pull localhost:5000/bavix/gripmock:latest
          docker images
      
      - name: Build manifest slim version
        if: github.event_name != 'pull_request'
        run: |
          make build-slim target_image="localhost:5000/bavix/gripmock:latest" arch=arm64;
          docker push "localhost:5000/bavix/gripmock:latest-slim-arm64";
          docker manifest inspect --insecure localhost:5000/bavix/gripmock:latest-slim-arm64;

          make build-slim target_image="localhost:5000/bavix/gripmock:latest" arch=amd64;
          docker push "localhost:5000/bavix/gripmock:latest-slim-amd64";
          docker manifest inspect --insecure localhost:5000/bavix/gripmock:latest-slim-amd64;

          echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -r '.tags[]' | while IFS= read -r tag; do
            docker manifest create "${tag}-slim" \
              --amend "localhost:5000/bavix/gripmock:latest-slim-arm64" \
              --amend "localhost:5000/bavix/gripmock:latest-slim-amd64" \
              --insecure;
          done;

      - name: Push manifest slim version
        if: github.event_name != 'pull_request'
        run: |
          MANIFEST=$(regctl manifest get --insecure localhost:5000/bavix/gripmock:latest-slim --format raw-body)
          echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -r '.tags[]' | while IFS= read -r tag; do
            echo "$MANIFEST" | regctl manifest put "${tag}-slim" --format oci;
          done
