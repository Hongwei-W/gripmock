// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: method.proto

package strictmode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GripMock_SayTitleHello_FullMethodName = "/strictmode.GripMock/SayTitleHello"
	GripMock_SayLowerHello_FullMethodName = "/strictmode.GripMock/sayLowerHello"
)

// GripMockClient is the client API for GripMock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GripMockClient interface {
	SayTitleHello(ctx context.Context, in *SayTitleHelloRequest, opts ...grpc.CallOption) (*SayTitleHelloReply, error)
	SayLowerHello(ctx context.Context, in *SayLowerHelloRequest, opts ...grpc.CallOption) (*SayLowerHelloReply, error)
}

type gripMockClient struct {
	cc grpc.ClientConnInterface
}

func NewGripMockClient(cc grpc.ClientConnInterface) GripMockClient {
	return &gripMockClient{cc}
}

func (c *gripMockClient) SayTitleHello(ctx context.Context, in *SayTitleHelloRequest, opts ...grpc.CallOption) (*SayTitleHelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SayTitleHelloReply)
	err := c.cc.Invoke(ctx, GripMock_SayTitleHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gripMockClient) SayLowerHello(ctx context.Context, in *SayLowerHelloRequest, opts ...grpc.CallOption) (*SayLowerHelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SayLowerHelloReply)
	err := c.cc.Invoke(ctx, GripMock_SayLowerHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GripMockServer is the server API for GripMock service.
// All implementations must embed UnimplementedGripMockServer
// for forward compatibility
type GripMockServer interface {
	SayTitleHello(context.Context, *SayTitleHelloRequest) (*SayTitleHelloReply, error)
	SayLowerHello(context.Context, *SayLowerHelloRequest) (*SayLowerHelloReply, error)
	mustEmbedUnimplementedGripMockServer()
}

// UnimplementedGripMockServer must be embedded to have forward compatible implementations.
type UnimplementedGripMockServer struct {
}

func (UnimplementedGripMockServer) SayTitleHello(context.Context, *SayTitleHelloRequest) (*SayTitleHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayTitleHello not implemented")
}
func (UnimplementedGripMockServer) SayLowerHello(context.Context, *SayLowerHelloRequest) (*SayLowerHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayLowerHello not implemented")
}
func (UnimplementedGripMockServer) mustEmbedUnimplementedGripMockServer() {}

// UnsafeGripMockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GripMockServer will
// result in compilation errors.
type UnsafeGripMockServer interface {
	mustEmbedUnimplementedGripMockServer()
}

func RegisterGripMockServer(s grpc.ServiceRegistrar, srv GripMockServer) {
	s.RegisterService(&GripMock_ServiceDesc, srv)
}

func _GripMock_SayTitleHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayTitleHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GripMockServer).SayTitleHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GripMock_SayTitleHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GripMockServer).SayTitleHello(ctx, req.(*SayTitleHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GripMock_SayLowerHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayLowerHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GripMockServer).SayLowerHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GripMock_SayLowerHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GripMockServer).SayLowerHello(ctx, req.(*SayLowerHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GripMock_ServiceDesc is the grpc.ServiceDesc for GripMock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GripMock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strictmode.GripMock",
	HandlerType: (*GripMockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayTitleHello",
			Handler:    _GripMock_SayTitleHello_Handler,
		},
		{
			MethodName: "sayLowerHello",
			Handler:    _GripMock_SayLowerHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "method.proto",
}
